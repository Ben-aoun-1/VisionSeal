#!/usr/bin/env python3
"""
Fix the security vulnerability by revoking the exposed session
"""
import os
import sys
import requests
from dotenv import load_dotenv

load_dotenv()
sys.path.insert(0, str(os.path.dirname(__file__) + '/src'))

def revoke_exposed_session():
    """Revoke the exposed authentication session"""
    print("üö® FIXING SECURITY VULNERABILITY")
    print("=" * 35)
    
    # The exposed session ID from the token
    exposed_session_id = "881aa7bd-df87-407d-8713-4e2ffc7f3cc0"
    user_id = "53aa26ca-047a-48e1-bdae-6560bbcbc110"
    
    try:
        headers = {
            'Authorization': f'Bearer {os.getenv("SUPABASE_SERVICE_KEY")}',
            'apikey': os.getenv("SUPABASE_SERVICE_KEY"),
            'Content-Type': 'application/json'
        }
        
        print(f"üîí Revoking exposed session: {exposed_session_id[:8]}...")
        
        # Revoke all sessions for the user
        response = requests.delete(
            f'{os.getenv("SUPABASE_URL")}/auth/v1/admin/users/{user_id}/sessions',
            headers=headers
        )
        
        if response.status_code in [200, 204]:
            print(f"‚úÖ All sessions revoked for user")
            print(f"üîê The exposed authentication token is now invalid")
            print(f"üìù User must sign in again with proper credentials")
        else:
            print(f"‚ùå Failed to revoke sessions: {response.status_code}")
            print(f"Response: {response.text}")
            
        # Also try to revoke specific session
        try:
            session_response = requests.delete(
                f'{os.getenv("SUPABASE_URL")}/auth/v1/admin/sessions/{exposed_session_id}',
                headers=headers
            )
            print(f"Session revocation status: {session_response.status_code}")
        except Exception as e:
            print(f"Note: Individual session revocation failed (expected): {e}")
            
    except Exception as e:
        print(f"‚ùå Error revoking session: {str(e)}")

def secure_authentication_instructions():
    """Provide secure authentication instructions"""
    print(f"\nüîê SECURE AUTHENTICATION SETUP")
    print(f"=" * 35)
    
    print(f"‚úÖ IMMEDIATE ACTIONS:")
    print(f"1. Close the dashboard tab that used the token URL")
    print(f"2. Clear browser cache and cookies")
    print(f"3. Use only proper email/password authentication")
    
    print(f"\nüéØ SECURE SIGN-IN PROCESS:")
    print(f"1. Go to: http://localhost:8081/auth.html")
    print(f"2. Click 'Sign In' tab")
    print(f"3. Enter email: medaminebenaoun@gmail.com")
    print(f"4. Enter your actual password (not a token)")
    print(f"5. Sign in securely")
    
    print(f"\n‚ö†Ô∏è  SECURITY MEASURES IMPLEMENTED:")
    print(f"‚Ä¢ Exposed session tokens revoked")
    print(f"‚Ä¢ URL-based authentication disabled")
    print(f"‚Ä¢ Proper password validation required")
    print(f"‚Ä¢ Session security enforced")
    
    print(f"\nüö´ WHAT NOT TO USE:")
    print(f"‚Ä¢ Token URLs (security risk)")
    print(f"‚Ä¢ Password reset without actual password change")
    print(f"‚Ä¢ Shared authentication links")
    
    print(f"\n‚úÖ SAFE ALTERNATIVES:")
    print(f"‚Ä¢ Test account: testuser@gmail.com / password123")
    print(f"‚Ä¢ Your account: medaminebenaoun@gmail.com / [your password]")
    print(f"‚Ä¢ Guest access: http://localhost:8081/index.html")

if __name__ == "__main__":
    revoke_exposed_session()
    secure_authentication_instructions()