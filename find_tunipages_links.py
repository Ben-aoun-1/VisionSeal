#!/usr/bin/env python3
"""
Find where the clickable links are in TuniPages
"""
import requests
from bs4 import BeautifulSoup
import urllib3

# Disable SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def find_tunipages_links():
    """Find all clickable links in TuniPages table"""
    print("🔍 FINDING TUNIPAGES CLICKABLE LINKS")
    print("=" * 40)
    
    url = 'https://www.appeloffres.net'
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'fr-FR,fr;q=0.9,en;q=0.8',
    }
    
    try:
        response = requests.get(url, headers=headers, timeout=15, verify=False)
        
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # Find all links that look like tender opportunities
            all_links = soup.find_all('a', href=True)
            tender_links = []
            
            for link in all_links:
                href = link.get('href', '')
                if 'appels-offres' in href and href.startswith('http'):
                    tender_links.append({
                        'url': href,
                        'text': link.get_text(strip=True)[:60],
                        'parent': link.parent.name if link.parent else None
                    })
            
            print(f"✅ Found {len(tender_links)} tender links on page")
            
            if tender_links:
                print(f"\n📋 Sample tender links:")
                for i, link in enumerate(tender_links[:5], 1):
                    print(f"   {i}. URL: {link['url']}")
                    print(f"      Text: {link['text']}...")
                    print(f"      Parent: {link['parent']}")
                    print()
                    
                # Check if these links are inside table cells
                print(f"🔍 Checking if links are in table structure...")
                table = soup.find('table')
                if table:
                    table_links = table.find_all('a', href=True)
                    table_tender_links = [a for a in table_links if 'appels-offres' in a.get('href', '')]
                    
                    print(f"   Found {len(table_tender_links)} tender links inside table")
                    
                    if table_tender_links:
                        print(f"   📋 Table tender links:")
                        for i, link in enumerate(table_tender_links[:3], 1):
                            href = link.get('href', '')
                            text = link.get_text(strip=True)
                            
                            # Find which cell this link is in
                            cell = link.find_parent(['td', 'th'])
                            if cell:
                                row = cell.find_parent('tr')
                                if row:
                                    all_cells = row.find_all(['td', 'th'])
                                    cell_index = all_cells.index(cell) if cell in all_cells else -1
                                    print(f"      {i}. Cell {cell_index}: {text[:50]}...")
                                    print(f"         URL: {href}")
                            print()
                    else:
                        print(f"   ❌ No tender links found inside table")
                        print(f"   💡 Links may be generated by JavaScript or in a different page section")
                else:
                    print(f"   ❌ No table found")
            else:
                print(f"❌ No tender links found on the page")
                print(f"💡 The links might be on a different page or generated by JavaScript")
                
                # Let's also check for any JavaScript that might be generating links
                scripts = soup.find_all('script')
                js_with_appels = [s for s in scripts if s.string and 'appels-offres' in s.string]
                if js_with_appels:
                    print(f"🔍 Found {len(js_with_appels)} scripts mentioning 'appels-offres'")
                    print(f"💡 The links might be generated dynamically by JavaScript")
                
        else:
            print(f"❌ Failed to get page: {response.status_code}")
            
    except Exception as e:
        print(f"❌ Error: {str(e)}")

if __name__ == "__main__":
    find_tunipages_links()